// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id
  name        String
  description String
  created_at  DateTime @default(now())
  Car         Car[]
}

model Specification {
  id          String   @id
  name        String
  description String
  created_at  DateTime @default(now())
  Car         Car[]
}

model User {
  id             String    @id
  name           String
  email          String
  password       String
  driver_license String
  isAdmin        Boolean   @default(false)
  avatar         String
  created_at     DateTime  @default(now())
  Rentals        Rentals[]
}

model Car {
  id             String          @id
  name           String
  description    String
  daily_rate     Float
  avaliable      Boolean         @default(true)
  license_plate  String
  fine_amount    Float
  brand          String
  category_id    String
  created_at     DateTime        @default(now())
  category       Category        @relation(fields: [category_id], references: [id])
  specifications Specification[]
  ImageCar       ImageCar[]
  Rentals        Rentals[]
}

model ImageCar {
  id         String   @id
  image_name String
  car_id     String
  created_at DateTime @default(now())
  car        Car      @relation(fields: [car_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Rentals {
  id                   String   @id
  card_id              String
  user_id              String
  start_date           DateTime @default(now())
  end_date             DateTime
  expected_return_date DateTime
  total                Float
  created_at           DateTime @default(now())
  updated_at           DateTime @default(now())
  car                  Car      @relation(fields: [card_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user                 User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
